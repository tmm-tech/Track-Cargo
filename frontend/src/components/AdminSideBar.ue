<template>
  <div class="flex h-screen">
    <!-- Alert Component -->
    <div v-if="alertMessage" :class="['alert', alertType]">
      <Alert v-if="showAlert" :message="alertMessage" :type="alertType" :show="showAlert" @close="hideAlert" />
    </div>

    <!-- Loading Screen -->
    <div v-if="isCheckingAuth" class="fixed inset-0 z-50 flex items-center justify-center bg-white">
      <div class="text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-[#273272] mx-auto mb-4"></div>
        <p class="text-gray-600">Loading dashboard...</p>
      </div>
    </div>

    <!-- Mobile Menu Overlay -->
    <div v-if="showMobileMenu" class="fixed inset-0 z-50 bg-black/50 md:hidden" @click="closeMobileMenu"></div>

    <!-- Sidebar Navigation (Only on Admin Pages) -->
    <AdminSidebar 
      v-if="isAuthenticated"
      :current-view="currentView"
      :current-user="currentUser"
      :sidebar-collapsed="sidebarCollapsed"
      :is-mobile-device="isMobileDevice"
      :show-mobile-menu="showMobileMenu"
      @navigate-to-view="navigateToView"
      @toggle-sidebar="toggleSidebar"
      @logout="logout"
    />

    <!-- Main Content -->
    <div class="flex-1 flex flex-col" :class="{ 'md:ml-0': isMobileDevice }">
      <!-- Shared Header -->
      <AppHeader 
        :is-authenticated="isAuthenticated"
        :current-user="currentUser"
        :is-mobile-device="isMobileDevice"
        @toggle-mobile-menu="toggleMobileMenu"
        @logout="logout"
      />

      <!-- Admin Dashboard Content -->
      <main class="flex-1 bg-gray-50 py-8 overflow-auto">
        <div class="container mx-auto px-2 sm:px-4">
          <!-- Dashboard View -->
          <DashboardView v-if="currentView === 'dashboard'" :packages="packages" :users="users" />
          
          <!-- User Management View -->
          <UserManagementView v-if="currentView === 'users'" />
          
          <!-- Shipping Management View -->
          <ShippingManagementView v-if="currentView === 'packages'" />
          
          <!-- Locations Management View -->
          <LocationManagementView v-if="currentView === 'locations'" />
          
          <!-- Activity Log View -->
          <ActivityLogView v-if="currentView === 'activity'" />
        </div>
      </main>

      <!-- Footer -->
      <footer class="bg-[#1a1a1a] text-white py-4">
        <div class="container mx-auto px-4 flex justify-center items-center">
          <p class="text-gray-400 text-center text-xs sm:text-sm">
            Copyright Â© {{ currentYear }} Texmon Logistics Limited - Admin Portal
          </p>
        </div>
      </footer>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted } from 'vue'
import { useRouter } from 'vue-router'
import AppHeader from '../components/shared/AppHeader.vue'
import AdminSidebar from '../components/admin/AdminSidebar.vue'
import DashboardView from '../components/admin/DashboardView.vue'
import UserManagementView from '../components/admin/UserManagementView.vue'
import ShippingManagementView from '../components/admin/ShippingManagementView.vue'
import LocationManagementView from '../components/admin/LocationManagementView.vue'
import ActivityLogView from '../components/admin/ActivityLogView.vue'
import Alert from '../components/ui/Alert.vue'
import userService from '../services/userServices.js'

const router = useRouter()

// Reactive data
const isAuthenticated = ref(false)
const isCheckingAuth = ref(true)
const currentUser = ref({})
const currentView = ref('dashboard')
const sidebarCollapsed = ref(false)
const isMobileDevice = ref(false)
const showMobileMenu = ref(false)
const showAlert = ref(false)
const alertMessage = ref('')
const alertType = ref('')
const packages = ref([])
const users = ref([])

const currentYear = computed(() => new Date().getFullYear())

// Methods
const checkMobileDevice = () => {
  isMobileDevice.value = window.innerWidth < 768
  if (isMobileDevice.value) {
    showMobileMenu.value = false
    sidebarCollapsed.value = false
  }
}

const toggleMobileMenu = () => {
  showMobileMenu.value = !showMobileMenu.value
}

const closeMobileMenu = () => {
  showMobileMenu.value = false
}

const navigateToView = (view) => {
  currentView.value = view
  if (isMobileDevice.value) {
    closeMobileMenu()
  }
}

const toggleSidebar = () => {
  if (!isMobileDevice.value) {
    sidebarCollapsed.value = !sidebarCollapsed.value
  }
}

const logout = async () => {
  try {
    await userService.logout()
    localStorage.removeItem('authToken')
    sessionStorage.removeItem('authToken')
    setAlert('Logout successful!', 'success')
    
    setTimeout(() => {
      router.push('/login')
    }, 1000)
  } catch (error) {
    console.error('Logout error:', error)
    setAlert('An error occurred during logout.', 'error')
  }
}

const setAlert = (message, type) => {
  alertMessage.value = message
  alertType.value = type
  showAlert.value = true

  setTimeout(() => {
    alertMessage.value = ''
    alertType.value = ''
  }, 3000)
}

const hideAlert = () => {
  showAlert.value = false
}

const checkAuthStatus = async () => {
  try {
    const token = localStorage.getItem('authToken') || sessionStorage.getItem('authToken')
    
    if (!token) {
      router.push('/login')
      return
    }

    const response = await userService.verifyToken()
    
    if (response.success && response.data.user) {
      isAuthenticated.value = true
      currentUser.value = {
        ...response.data.user,
        initials: getInitials(response.data.user.fullname)
      }
    } else {
      localStorage.removeItem('authToken')
      sessionStorage.removeItem('authToken')
      router.push('/login')
    }
  } catch (error) {
    console.error('Auth check error:', error)
    router.push('/login')
  } finally {
    isCheckingAuth.value = false
  }
}

const getInitials = (fullname) => {
  if (!fullname) return 'NA'
  return fullname.split(' ').map(n => n[0]).join('').toUpperCase()
}

// Lifecycle
onMounted(() => {
  checkAuthStatus()
  checkMobileDevice()
  window.addEventListener('resize', checkMobileDevice)
})

onUnmounted(() => {
  window.removeEventListener('resize', checkMobileDevice)
})
</script>

<style scoped>
.animate-spin {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.sidebar {
  transition: width 0.3s ease, transform 0.3s ease;
}

@media (max-width: 767px) {
  .sidebar {
    position: fixed !important;
    z-index: 50;
  }
}
</style>